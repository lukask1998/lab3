@Override
public boolean containsValue(Object value)
{
    for (Node<K, V> n : table) {

        for (Node<K, V> n2 = n; n != null; n = n.next) {

            if(value.toString().equals(n.value.toString())) return true;

        }
    }
    return false;
}

public int averageChainSize() {
            
    int elements = 0;

    for (Node<K, V> n : table) {

        if (n != null)
            elements++;
    }

    return size / elements;
}

@Override
public int emptyElementsSize() {

    int emptySize = 0;

    for (Node<K, V> n : table) {

        if (n == null) emptySize++;
    }

    return emptySize;
}

@Override
public void replaceAll(V oldValue, V newValue) {

    for (Node<K, V> n : table) {

        for (Node<K, V> n2 = n; n != null; n = n.next) {

            if(oldValue.toString().equals(n.value.toString())) {

                n.value = (V) newValue;

            }

        }
    }

}
